根据IEEE 754标准，js的浮点数用二进制表示时分成三个部分：1 bit 用来表示符号，e bits 用来表示整数部分，剩下的bits用来表达小数部分。整数部分 = 2 ^ (e bits 长的整数部分)，所以整数部分可以不失精度地在二进制和十进制之间转换。但小数部分不能精确表达。简单来说，0.1在换算成二进制时失去了精度，再换算成十进制时会得到0.1000...0006。所以当0.1+0.2时，0.1换成二进制并失去精度，在逻辑运算后再转换成一个不准确的十进制数字，约为0.3000...0004。而0.3在转换时会失去相对较低的精度，以至于0.3 != 0.3000...0004

为了避免浮点数精度问题，应当避免使用 == 或 !=。当对比0.1+0.2和0.3时，可以使用(Math.abs(0.1 + 0.2 - 0.3) < tol), tol是可变的精度